ARG CUDA_BASE_TAG=12.1.0-cudnn8-devel

ARG GPU=cuda
ARG ROCKY_VER=9
ARG SLURM_VER=23.02.7
ARG GOSU_VERSION=1.17
ARG MINICONDA_VER=23.11.0-0

FROM nvidia/cuda:${CUDA_BASE_TAG}-rockylinux${ROCKY_VER}

LABEL org.opencontainers.image.source="https://github.com/kristiankielhofner/slurm-docker-cluster-gpu" \
      org.opencontainers.image.title="slurm-docker-cluster-gpu" \
      org.opencontainers.image.description="Slurm Docker cluster with CUDA on Rocky Linux 9" \
      org.label-schema.docker.cmd="docker compose up -d" \
      maintainer="Kristian Kielhofner"

ARG CUDA_BASE_TAG

ARG GPU
ARG ROCKY_VER
ARG SLURM_VER
ARG GOSU_VERSION
ARG MINICONDA_VER

WORKDIR /code

RUN --mount=type=cache,target=/var/cache/dnf dnf makecache \
    && dnf -y update \
    && dnf -y install dnf-plugins-core epel-release \
    && dnf install -y 'dnf-command(config-manager)' \
    && dnf config-manager --set-enabled devel \
    && dnf -y install \
        wget \
        bzip2 \
        perl \
        gcc \
        gcc-c++\
        git \
        gnupg \
        make \
        munge \
        munge-devel \
        python3-devel \
        python3-pip \
        python3 \
        mariadb-server \
        mariadb-devel \
        psmisc \
        bash-completion \
        vim-enhanced \
        http-parser-devel \
        json-c-devel \
        libaio-devel \
        procps-ng \
        htop \
        diffutils \
        libjwt-devel \
        libyaml-devel \
        lz4-devel \
        readline-devel \
        libcurl-devel \
        pmix-devel \
        lua-devel \
        hdf5-devel \
        librdkafka-devel \
        numactl-devel \
        numactl \
        numatop

# Set in environment
ENV CUDA_BASE_TAG=${CUDA_BASE_TAG}

RUN --mount=type=cache,target=/root/.cache/pip pip3 install Cython nose

RUN wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" \
    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64.asc" \
    && export GNUPGHOME="$(mktemp -d)" \
    && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true

# Fix for NVML
RUN ln -s /usr/lib64/libnvidia-ml.so.1 /usr/lib64/libnvidia-ml.so

RUN --mount=type=cache,target=/code \
    wget -c -O slurm-${SLURM_VER}.tar.bz2 https://download.schedmd.com/slurm/slurm-${SLURM_VER}.tar.bz2

RUN --mount=type=cache,target=/code tar xvf slurm-${SLURM_VER}.tar.bz2 \
    && pushd slurm-${SLURM_VER} \
    && ./configure --enable-debug --prefix=/usr --sysconfdir=/etc/slurm \
        --with-mysql_config=/usr/bin --libdir=/usr/lib64 --with-nvml=/usr/local/cuda/targets/x86_64-linux \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && popd \
    && rm -rf slurm-${SLURM_VER} \
    && groupadd -r --gid=990 slurm \
    && useradd -r -g slurm --uid=990 slurm \
    && mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/run/slurmdbd \
        /var/lib/slurmd \
        /var/log/slurm \
        /data \
    && touch /var/lib/slurmd/node_state \
        /var/lib/slurmd/front_end_state \
        /var/lib/slurmd/job_state \
        /var/lib/slurmd/resv_state \
        /var/lib/slurmd/trigger_state \
        /var/lib/slurmd/assoc_mgr_state \
        /var/lib/slurmd/assoc_usage \
        /var/lib/slurmd/qos_usage \
        /var/lib/slurmd/fed_mgr_state \
    && chown -R slurm:slurm /var/*/slurm* \
    && /sbin/create-munge-key

RUN --mount=type=cache,target=/code wget -c -O Miniforge3.sh \
    https://github.com/conda-forge/miniforge/releases/download/${MINICONDA_VER}/Miniforge3-${MINICONDA_VER}-Linux-x86_64.sh && \
    bash Miniforge3.sh -b -p "/opt/conda" && rm Miniforge3.sh

RUN cp /opt/conda/etc/profile.d/conda.sh /etc/profile.d

COPY .config/slurm.conf /etc/slurm/slurm.conf
COPY .config/slurmdbd.conf /etc/slurm/slurmdbd.conf
COPY .config/gres.conf /etc/slurm/gres.conf
COPY .config/cgroup.conf /etc/slurm/cgroup.conf

RUN chown slurm:slurm /etc/slurm/slurmdbd.conf \
    && chmod 600 /etc/slurm/slurmdbd.conf

COPY misc/docker-entrypoint.sh /docker-entrypoint.sh
ENTRYPOINT ["/docker-entrypoint.sh"]

# Put us somewhere other than /
WORKDIR /data

CMD ["slurmdbd"]
